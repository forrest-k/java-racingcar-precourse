

TDD 적용하기

1단계. Util 성격의 기능이 TDD로 도전하기 좋다!
	- 사용자로부터 입력받은 3개의 숫자 예외 처리
		- 1~9의 숫자인가?
		- 중복 값이 있는가?
		- 3자리 인가..



	1. 이름_입력값_유효성
	- 사용자로 부터 입력받은 이름, 횟수 예외처리
		1. 이름: 쉼표를 기준으로 5글자 이하만 입력 가능
			- 쉼표로 나눴을 때 값이 1글자 이상~5글자 이하 인가

	2. 횟수_입력값_유효성
		2. 이동횟수:
			- 숫자 값인가?
			- 0 보다 큰가?


	입력된 이동 횟수 만큼 랜덤값을 기반한 n대의 자동차 경주가 진행된다. (메인 경주 로직)

	Racing

	3. 자동차별_경주_값 (자동차 이름, 현재까지의 값: Car)
		- 전진_혹은_멈춤_여부 (랜덤값, Car) {
			랜덤값 >= 4 ? "전진" : "멈춤"
		}

	4. n회_경주_실행(n, Cars) {
		for(int i = 0; i < n; i ++) {
			자동차_경주 (Cars);
		}

	}

	5. 자동차_경주(Cars) {
		for(Car c: Cars) {
			자동차별_경주_값 (c);
		}
	}

	6. 우승자_판별(Cars) {
		객체 값 비교 메소드,

	}


Car
	- 이름
	- 경주 결과 값 (list) or int >> 출력 할 때 수 만큼 - 출력

Cars
	Car[] cars;

TDD 적용하기

1단계. Util 성격의 기능이 TDD로 도전하기 좋다!
	- 사용자로부터 입력받은 3개의 숫자 예외 처리
		- 1~9의 숫자인가?
		- 중복 값이 있는가?
		- 3자리 인가..



	1. 이름_입력값_유효성
	- 사용자로 부터 입력받은 이름, 횟수 예외처리
		1. 이름: 쉼표를 기준으로 5글자 이하만 입력 가능
			- 쉼표로 나눴을 때 값이 1글자 이상~5글자 이하 인가

	2. 횟수_입력값_유효성
		2. 이동횟수:
			- 숫자 값인가?
			- 0 보다 큰가?


	입력된 이동 횟수 만큼 랜덤값을 기반한 n대의 자동차 경주가 진행된다. (메인 경주 로직)

	Racing

	3. 자동차별_경주_값 (자동차 이름, 현재까지의 값: Car)
		- 전진_혹은_멈춤_여부 (랜덤값, Car) {
			랜덤값 >= 4 ? "전진" : "멈춤"
		}

	4. n회_경주_실행(n, Cars) {
		for(int i = 0; i < n; i ++) {
			자동차_경주 (Cars);
		}

	}

	5. 자동차_경주(Cars) {
		for(Car c: Cars) {
			자동차별_경주_값 (c);
		}
	}

	6. 우승자_판별(Cars) {
		객체 값 비교 메소드,

	}


Car
	- 이름
	- 경주 결과 값 (list) or int >> 출력 할 때 수 만큼 - 출력

Cars
	Car[] cars;